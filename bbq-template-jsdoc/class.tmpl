<!DOCTYPE html>
<html lang="en">
	<head>
		<meta http-equiv="content-type" content="text/html; charset={+IO.encoding+}" />
		<meta name="generator" content="JsDoc Toolkit" />
		{! Link.base = "../"; /* all generated links will be relative to this */ !}
		<title>JsDoc Reference - {+data.alias+}</title>
		
		<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" />
		<script src="http://twitter.github.com/bootstrap/1.4.0/bootstrap-dropdown.min.js"></script>
		
		<!-- Le html5 shim, for IE6-8 support of html elements -->
		<!--[if lt IE 9]>
			<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
		<![endif]-->
		
		<link rel="stylesheet" href="http://twitter.github.com/bootstrap/1.4.0/bootstrap.min.css">
		
		<style type="text/css">
			{+include("static/prettify.css")+}
		</style>
		
		<script type="text/javascript">
			{+include("static/prettify.js")+}
		</script>
		
		<style type="text/css">
			{+include("static/default.css")+}
		</style>
		
		<style type="text/css">
		
		.parameterlist caption {
			background-color: #EEE;
			color: #333;
			border-color: rgba(0, 0, 0, 0.15);
			border-bottom: none;
		}
		
		</style>
	</head>

	<body>
		<div id="content">
<!-- ============================== class title ============================ -->
			<h1 class="classTitle">
				{!
					var classType = "";
					
					if (data.isBuiltin()) {
						classType += "Built-In ";
					}
					
					if (data.isNamespace) {
						if (data.is('FUNCTION')) {
							classType += "Function ";
						}
						classType += "Namespace ";
					}
					else {
						classType += "Class ";
					}
				!}
				{+classType+}{+data.alias+}
			</h1>

<!-- ============================== class summary ========================== -->			
			<p class="description">
				<if test="data.version">
					Version {+ data.version +}.<br />
				</if>
				<if test="data.augments.length">Extends
					{+
						data.augments
						.sort()
						.map(
							function($) { return new Link().toSymbol($); }
						)
						.join(", ")
					+}.<br />
				</if>
				<if test="!data.isBuiltin()">{# isn't defined in any file #}
					<em>Defined in: </em> {+new Link().toSrc(data.srcFile)+}.<br />
				</if>
				
				{+resolveLinks(data.classDesc)+}
				
				{!
	
	template = getTemplate("class/description.tmpl");
	output += template.process(data);
	
	template = getTemplate("class/example.tmpl");
	output += template.process(data.example);

	template = getTemplate("class/see.tmpl");
	output += template.process(data.see);

				!}
			</p>

<!-- ============================== constructor summary ==================== -->			
			<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
				<table class="summaryTable zebra-striped" cellspacing="0" summary="A summary of the constructor documented in the class {+data.alias+}.">
					<caption>{+classType+}Summary</caption>
					<thead>
						<tr>
							<th scope="col">Constructor Attributes</th>
							<th scope="col">Constructor Name and Description</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td class="attributes">{!
								if (data.isPrivate) output += "&lt;private&gt; ";
								if (data.isInner) output += "&lt;inner&gt; ";
							!}&nbsp;</td>
							<td class="nameDescription" {!if (data.comment.getTag("hilited").length){output += 'style="color: red"'}!}>
								<div class="fixedFont">
									<b>{+ new Link().toSymbol(data.alias).inner('constructor')+}</b><if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if>
								</div>
								<div class="description">{+resolveLinks(summarize(data.desc))+}</div>
							</td>
						</tr>
					</tbody>
				</table>
			</if>

<!-- ============================== properties summary ===================== -->
			<if test="data.properties.length">
				{! var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownProperties.length">
					<table class="summaryTable zebra-striped" cellspacing="0" summary="A summary of the fields documented in the class {+data.alias+}.">
						<caption>Field Summary</caption>
						<thead>
							<tr>
								<th scope="col">Field Attributes</th>
								<th scope="col">Field Name and Description</th>
							</tr>
						</thead>
						<tbody>
						<for each="member" in="ownProperties">
							<tr>
								<td class="attributes">{!
									if (member.isPrivate) output += "&lt;private&gt; ";
									if (member.isInner) output += "&lt;inner&gt; ";
									if (member.isStatic) output += "&lt;static&gt; ";
									if (member.isConstant) output += "&lt;constant&gt; ";
								!}&nbsp;</td>
								<td class="nameDescription">
									<div class="fixedFont">
									<if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name)+}</b>
									</div>
									<div class="description">{+resolveLinks(summarize(member.desc))+}</div>
								</td>
							</tr>
						</for>
						</tbody>
					</table>
				</if>
				
				<if test="data.inheritsFrom.length">
					<dl class="inheritsList">
					{!
						var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias});
						
						var contributers = [];
						borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
						for (var i = 0, l = contributers.length; i < l; i++) {
							output +=
								"<dt>Fields borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
								+
								"<dd>" +
								borrowedMembers
								.filter(
									function($) { return $.memberOf == contributers[i] }
								)
								.sort(makeSortby("name"))
								.map(
									function($) { return new Link().toSymbol($.alias).withText($.name) }
								)
								.join(", ")
								+
								"</dd>";
						}
					!}
					</dl>
				</if>
			</if>

<!-- ============================== methods summary ======================== -->
			<if test="data.methods.length">
				{! var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownMethods.length">
					<table class="summaryTable zebra-striped" cellspacing="0" summary="A summary of the methods documented in the class {+data.alias+}.">
						<caption>Method Summary</caption>
						<thead>
							<tr>
								<th scope="col">Method Attributes</th>
								<th scope="col">Method Name and Description</th>
							</tr>
						</thead>
						<tbody>
						<for each="member" in="ownMethods">
							<tr>
								<td class="attributes">{!
									if (member.isPrivate) output += "&lt;private&gt; ";
									if (member.isInner) output += "&lt;inner&gt; ";
									if (member.isStatic) output += "&lt;static&gt; ";
								!}&nbsp;</td>
								<td class="nameDescription">
									<div class="fixedFont"><if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name.replace(/\^\d+$/, ''))+}</b>{+makeSignature(member.params)+}
									</div>
									<div class="description">{+resolveLinks(summarize(member.desc))+}</div>
								</td>
							</tr>
						</for>
						</tbody>
					</table>
				</if>
				
				<if test="data.inheritsFrom.length">
					<dl class="inheritsList">
					{!
						var borrowedMembers = data.methods.filter(function($) {return $.memberOf != data.alias});
						var contributers = [];
						borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
						for (var i = 0, l = contributers.length; i < l; i++) {
							output +=
								"<dt>Methods borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
								+
								"<dd>" +
								borrowedMembers
								.filter(
									function($) { return $.memberOf == contributers[i] }
								)
								.sort(makeSortby("name"))
								.map(
									function($) { return new Link().toSymbol($.alias).withText($.name) }
								)
								.join(", ")
								+
								"</dd>";
						}
					
					!}
					</dl>
				</if>
			</if>
<!-- ============================== events summary ======================== -->
			<if test="data.events.length">
				{! var ownEvents = data.events.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownEvents.length">
					<table class="summaryTable" cellspacing="0" summary="A summary of the events documented in the class {+data.alias+}.">
						<caption>Event Summary</caption>
						<thead>
							<tr>
								<th scope="col">Event Attributes</th>
								<th scope="col">Event Name and Description</th>
							</tr>
						</thead>
						<tbody>
						<for each="member" in="ownEvents">
							<tr>
								<td class="attributes">{!
									if (member.isPrivate) output += "&lt;private&gt; ";
									if (member.isInner) output += "&lt;inner&gt; ";
									if (member.isStatic) output += "&lt;static&gt; ";
								!}&nbsp;</td>
								<td class="nameDescription">
									<div class="fixedFont"><if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name)+}</b>{+makeSignature(member.params)+}
									</div>
									<div class="description">{+resolveLinks(summarize(member.desc))+}</div>
								</td>
							</tr>
						</for>
						</tbody>
					</table>
				</if>
				
				<if test="data.inheritsFrom.length">
					<dl class="inheritsList">
					{!
						var borrowedMembers = data.events.filter(function($) {return $.memberOf != data.alias});
						var contributers = [];
						borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
						for (var i = 0, l = contributers.length; i < l; i++) {
							output +=
								"<dt>Events borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
								+
								"<dd>" +
								borrowedMembers
								.filter(
									function($) { return $.memberOf == contributers[i] }
								)
								.sort(makeSortby("name"))
								.map(
									function($) { return new Link().toSymbol($.alias).withText($.name) }
								)
								.join(", ")
								+
								"</dd>";
						}
					
					!}
					</dl>
				</if>
			</if>

<!-- ============================== constructor details ==================== -->		
			<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
				<article>
					<a name="constructor"></a>
					<h2>Constructor Detail</h2>
					<h3>{!
						if (data.isPrivate) output += "&lt;private&gt; ";
						if (data.isInner) output += "&lt;inner&gt; ";
					!}
							{+ data.alias +}<if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if>
					</h3>
					{!

	template = getTemplate("class/parameters.tmpl");
	output += template.process(data.params);
	
	template = getTemplate("class/deprecated.tmpl");
	output += template.process(data.deprecated);
	
	template = getTemplate("class/since.tmpl");
	output += template.process(data.since);
	
	template = getTemplate("class/exceptions.tmpl");
	output += template.process(data.exceptions);
	
	template = getTemplate("class/returns.tmpl");
	output += template.process(data.returns);
	
	template = getTemplate("class/requires.tmpl");
	output += template.process(data.requires);
	
	template = getTemplate("class/see.tmpl");
	output += template.process(data.see);

					!}
				</article>
			</if>

<!-- ============================== field details ========================== -->		
			<if test="defined(ownProperties) && ownProperties.length">
				<article>
					<h2>Field Detail</h2>
					<for each="member" in="ownProperties">
						<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
						<h3>{!
								if (member.isPrivate) output += "&lt;private&gt; ";
								if (member.isInner) output += "&lt;inner&gt; ";
								if (member.isStatic) output += "&lt;static&gt; ";
								if (member.isConstant) output += "&lt;constant&gt; ";
							!}

							<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
							<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>
						</h3>

						{!

	template = getTemplate("class/description.tmpl");
	output += template.process(member);
	
	template = getTemplate("class/example.tmpl");
	output += template.process(member.example);
	
	template = getTemplate("class/deprecated.tmpl");
	output += template.process(member.deprecated);
	
	template = getTemplate("class/since.tmpl");
	output += template.process(member.since);
	
	template = getTemplate("class/see.tmpl");
	output += template.process(member.see);
	
	template = getTemplate("class/default-value.tmpl");
	output += template.process(member.defaultValue);
					
					!}

						<if test="!$member_last"><hr /></if>
					</for>
				</article>
			</if>

<!-- ============================== method details ========================= -->		
			<if test="defined(ownMethods) && ownMethods.length">
				<article>
					<h2>Method Detail</h2>
					<for each="member" in="ownMethods">
						<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
						<h3>{!
								if (member.isPrivate) output += "&lt;private&gt; ";
								if (member.isInner) output += "&lt;inner&gt; ";
								if (member.isStatic) output += "&lt;static&gt; ";
							!}

							<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
							<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name.replace(/\^\d+$/, '')+}</b>{+makeSignature(member.params)+}
						</h3>

						{!
					
	template = getTemplate("class/description.tmpl");
	output += template.process(member);
					
	template = getTemplate("class/example.tmpl");
	output += template.process(member.example);
					
	template = getTemplate("class/parameters.tmpl");
	output += template.process(member.params);
	
	template = getTemplate("class/deprecated.tmpl");
	output += template.process(member.deprecated);
	
	template = getTemplate("class/since.tmpl");
	output += template.process(member.since);
	
	template = getTemplate("class/exceptions.tmpl");
	output += template.process(member.exceptions);
	
	template = getTemplate("class/returns.tmpl");
	output += template.process(member.returns);
	
	template = getTemplate("class/requires.tmpl");
	output += template.process(member.requires);
	
	template = getTemplate("class/see.tmpl");
	output += template.process(member.see);
	
					!}

						<if test="!$member_last"><hr /></if>
					</for>
				</article>
			</if>

<!-- ============================== event details ========================= -->		
			<if test="defined(ownEvents) && ownEvents.length">
				<article>
					<h2>Event Detail</h2>
					<for each="member" in="ownEvents">
						<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
							<div class="fixedFont">{!
								if (member.isPrivate) output += "&lt;private&gt; ";
								if (member.isInner) output += "&lt;inner&gt; ";
								if (member.isStatic) output += "&lt;static&gt; ";
							!}

							<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
							<if test="member.isStatic && member.memberOf != '_global_'">
								<span class="light">{+member.memberOf+}.</span>
							</if>
							<strong>{+member.name+}</strong>{+makeSignature(member.params)+}
						</div>

						{!
					
	template = getTemplate("class/description.tmpl");
	output += template.process(member);
	
	template = getTemplate("class/example.tmpl");
	output += template.process(member.example);
	
	template = getTemplate("class/parameters.tmpl");
	output += template.process(member.params);
	
	template = getTemplate("class/deprecated.tmpl");
	output += template.process(member.deprecated);
	
	template = getTemplate("class/since.tmpl");
	output += template.process(member.since);
	
	template = getTemplate("class/exceptions.tmpl");
	output += template.process(member.exceptions);
	
	template = getTemplate("class/returns.tmpl");
	output += template.process(member.returns);
	
	template = getTemplate("class/requires.tmpl");
	output += template.process(member.requires);
	
	template = getTemplate("class/see.tmpl");
	output += template.process(member.see);
					
					!}

						<hr />
					</for>
				</article>
			</if>
		</div>
		
<!-- ============================== footer ================================= -->
		<footer>Documentation generated by <a href="http://code.google.com/p/jsdoc-toolkit/" target="_blankt">JsDoc Toolkit</a> {+JSDOC.VERSION+} on {+new Date()+}</footer>
		
		<script type="text/javascript">

$("pre").addClass("prettyprint linenums");
$("code").each(function(index, node) {
node.innerHTML = node.innerHTML.trim();
});
prettyPrint();

		</script>
	</body>
</html>
