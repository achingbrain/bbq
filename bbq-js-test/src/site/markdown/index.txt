#Â bbq-js-test

This module allows you to mock AJAX requests in your [JavaScript unit tests](../bbq-test/index.html).

## Setup

Declare this module as a test dependency in your pom.xml:

	<dependency>
		<groupId>org.bbqjs</groupId>
		<artifactId>bbq-js-test</artifactId>
		<version>${currentVersion}</version>
		<scope>test</scope>
	</dependency>

## Mocking an AJAX request in a test

To mock an AJAX request, first register a listener function with the [bbq.ajax.MockAJAXRequest](jsdoc/symbols/bbq.ajax.MockAJAXRequest.html) object.  Note that the listener functions are keyed by URL.

	bbq.ajax.MockAJAXRequest["/foo/bar"] = function(args) {
		return new bbq.ajax.MockJSONResponse({
			response: {
				baz: "qux"
			}
		});
	}

This listener function should take the arguments passed to the [bbq.ajax.AJAXRequest](../bbq-js/jsdoc/symbols/bbq.ajax.AJAXRequest.html) subclass as an argument and return an instance of [bbq.ajax.MockJSONResponse](jsdoc/symbols/bbq.ajax.MockJSONResponse.html).  The MockJSONResponse should have an options object passed to it which contains one value - response - which is the object which will be passed to the onSuccess handler.

Then dispatch an AJAX request:

	new bbq.ajax.JSONRequest({
		url: "/foo/bar",
		args: {
			bar: "baz"
		},
		onSuccess: function(serverResponse, json) {
			alert("server said: " + json.baz);
		},
		onFailure: function(serverResponse) {
			alert("AJAX request failed!");
		}
	});

This will cause your handler to be looked up by the URL passed to the JSONRequest and if found  the onSuccess handler will be immediately invoked.

## Mocking an AJAX request failure

To mock an AJAX request failure, override the X-BBQ-ResponseType header in your [bbq.ajax.MockJSONResponse](jsdoc/symbols/bbq.ajax.MockJSONResponse.html) to return a negative number:

	bbq.ajax.MockAJAXRequest["/foo/bar"] = function(args) {
		return new bbq.ajax.MockJSONResponse({
			response: {
				baz: "qux"
			},
			headers: {
				"X-BBQ-ResponseType": -100
			}
		});
	}

This will cause the onFailure callback to be invoked.
